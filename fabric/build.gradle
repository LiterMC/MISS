plugins {
	id 'java'
	id 'idea'
	id 'maven-publish'
	id 'fabric-loom'
}

base {
	archivesName = "${mod_name}-fabric-${minecraft_version}${mod_artifact_suffix}"
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
	implementation "com.google.code.findbugs:jsr305:3.0.1"
	implementation project(":common")
}

loom {
	if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
		accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
	}
	mixin {
		defaultRefmapName.set("${mod_id}.refmap.json")
	}
	runs {
		client {
			client()
			setConfigName("Fabric Client")
			ideConfigGenerated(true)
			runDir("run")
		}
		server {
			server()
			setConfigName("Fabric Server")
			ideConfigGenerated(true)
			runDir("run")
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
	source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
	from(project(":common").sourceSets.main.allSource)
}

processResources {
	from project(":common").sourceSets.main.resources
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId base.archivesName.get()
			from components.java
		}
	}
	repositories {
		maven {
			url "file://" + System.getenv("local_maven")
		}
	}
}
